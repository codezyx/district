plugins {
    id 'java'
    id 'application'
}

jar {
    exclude "**/*.xml","**/*.properties","**/*.json","**/*.sql"
}

applicationDistribution.from(sourceSets.main.resources) {
    into "conf"
}

repositories {
//    mavenCentral()
    jcenter()
}

version = '1.0.0'
def vertxVersion = '3.5.0'
sourceCompatibility = '1.8'

dependencies {
    compile "io.vertx:vertx-jdbc-client:$vertxVersion"
    compile "io.vertx:vertx-unit:$vertxVersion"
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"
    compile "io.vertx:vertx-web-client:$vertxVersion"
    compile 'io.vertx:vertx-config:3.4.1'
    compile 'io.netty:netty-all:4.1.15.Final'
    compile 'com.h2database:h2:1.4.192'
    compile 'org.apache.logging.log4j:log4j-api:2.8.2'
    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
}

mainClassName = 'com.nosoft.district.App'

run {
    args = ['run', mainClassName, "--launcher-class=io.vertx.core.Launcher"]
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.0'
}

tasks.withType(AbstractCompile) {
    if (it.hasProperty('options')) {
        options?.encoding = "UTF-8"
    }
}

startScripts {
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('set CLASSPATH=%APP_HOME%' , $/set CLASSPATH=%APP_HOME%\conf;%APP_HOME%/$)
        unixScriptFile.text = unixScriptFile.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/conf:$APP_HOME')
    }
}

javadoc {
    options?.encoding = 'UTF-8'
//    failOnError = false
}

